# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type AccountVO {
  avatar: String
  creationDate: Date
  department: DepartmentVO
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  settings: UserSettingsVO
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

type AuthTokenVO {
  challenge: String
  pubkey: String
  signature: String
  username: String
}

type ConfigurationVO {
  backgroundImages: [String]
  creationDate: Date
  id: Int
  label: String
  description: String
  comments: String
  largeLogo: String
  name: String
  partners: [DepartmentVO]
  properties: Map_String_StringScalar
  smallLogo: String
  statusId: Int
  updateDate: Date
}

type DepartmentVO {
  creationDate: Date
  hasLogo: Boolean
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  logo: String
  name: String
  siteUrl: String
  statusId: Int
  updateDate: Date
}

"Mutation root"
type Mutation {
  "Confirm an account email"
  confirmAccountEmail(code: String, email: String): Boolean!
  "Create an account"
  createAccount(account: AccountVOInput): AccountVO
  "Delete many person (by ids)"
  deletePersons(ids: [Int]): Boolean!
  "Delete a user event"
  deleteUserEvent(id: Int!): Boolean!
  "Delete many user events"
  deleteUserEvents(ids: [Int]): Boolean!
  "Create or update an account"
  saveAccount(account: AccountVOInput): AccountVO
  "Save pod configuration"
  saveConfiguration(config: ConfigurationVOInput): ConfigurationVO
  "Create or update many persons"
  savePersons(persons: [PersonVOInput]): [PersonVO]
  "Resent confirmation email"
  sendAccountConfirmationEmail(email: String, locale: String = "en_GB"): Boolean!
}

type PersonVO {
  avatar: String
  creationDate: Date
  department: DepartmentVO
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

"Query root"
type Query {
  "Load a user account"
  account(pubkey: String): AccountVO
  "Ask for a new auth challenge"
  authChallenge: AuthTokenVO
  "Authenticate using a token"
  authenticate(token: String): Boolean!
  "Clear a single cache or all caches"
  clearCache(name: String): Boolean!
  "Load pod configuration"
  configuration(id: Int, label: String): ConfigurationVO
  "Get a department"
  department(id: Int!): DepartmentVO
  "Search in departments"
  departments(filter: DepartmentFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "name", sortDirection: String = "asc"): [DepartmentVO]
  "Check if email exists (from a md5 hash)"
  isEmailExists(email: String, hash: String): Boolean!
  "Search in persons"
  persons(filter: PersonFilterVOInput, offset: Int = 0, size: Int = 1000, sortBy: String = "pubkey", sortDirection: String = "asc"): [PersonVO]
  "Get total persons count"
  personsCount(filter: PersonFilterVOInput): Long!
  "Search in user events"
  userEvents(filter: UserEventFilterVOInput, page: PageInput): [UserEventVO]
}


type ReferentialVO {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  "Get the level from a referential entity"
  level: ReferentialVO
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

type SoftwareVO {
  creationDate: Date
  id: Int
  label: String
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  updateDate: Date
}

"Subscription root"
type Subscription {
  "Subscribe to an account update"
  updateAccount(
    "Minimum interval to find changes, in seconds."
    interval: Int = 30
  ): AccountVO
}

type UserEventVO {
  content: String
  creationDate: Date
  eventType: String
  hash: String
  id: Int
  issuer: String
  readSignature: String
  recipient: String
  signature: String
  updateDate: Date
}

type UserSettingsVO {
  content: String
  id: Int
  issuer: String
  latLongFormat: String
  locale: String
  nonce: String
  updateDate: Date
}

enum SortDirection {
  ASC
  DESC
}

input AccountVOInput {
  avatar: String
  creationDate: Date
  department: DepartmentVOInput
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  settings: UserSettingsVOInput
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

input ConfigurationVOInput {
  backgroundImages: [String]
  creationDate: Date
  id: Int
  label: String
  largeLogo: String
  name: String
  partners: [DepartmentVOInput]
  properties: Map_String_StringScalar
  smallLogo: String
  statusId: Int
  updateDate: Date
}

input DepartmentFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  withLogo: Boolean
}

input DepartmentVOInput {
  creationDate: Date
  hasLogo: Boolean
  id: Int
  label: String
  logo: String
  name: String
  siteUrl: String
  statusId: Int
  updateDate: Date
}

input PageInput {
  offset: Long!
  size: Int!
  sortBy: String
  sortDirection: SortDirection
}

input PersonFilterVOInput {
  email: String
  excludedIds: [Int]
  firstName: String
  id: Int
  includedIds: [Int]
  label: String
  lastName: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  pubkey: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
  userProfileId: Int
  userProfileIds: [Int]
  userProfiles: [String]
}

input PersonVOInput {
  avatar: String
  creationDate: Date
  department: DepartmentVOInput
  email: String
  firstName: String
  hasAvatar: Boolean
  id: Int
  lastName: String
  mainProfile: String
  profiles: [String]
  pubkey: String
  statusId: Int
  updateDate: Date
  username: String
  usernameExtranet: String
}

input ReferentialFilterVOInput {
  excludedIds: [Int]
  id: Int
  includedIds: [Int]
  label: String
  levelId: Int
  levelIds: [Int]
  levelLabel: String
  levelLabels: [String]
  name: String
  searchAttribute: String
  searchJoin: String
  searchText: String
  statusIds: [Int]
}

input ReferentialVOInput {
  comments: String
  creationDate: Date
  description: String
  entityName: String
  id: Int
  label: String
  levelId: Int
  name: String
  rankOrder: Int
  statusId: Int
  updateDate: Date
  validityStatusId: Int
}

input SoftwareVOInput {
  creationDate: Date
  id: Int
  label: String
  name: String
  properties: Map_String_StringScalar
  statusId: Int
  updateDate: Date
}

input UserEventFilterVOInput {
  issuer: String
  recipient: String
}

input UserEventVOInput {
  content: String
  creationDate: Date
  eventType: String
  hash: String
  id: Int
  issuer: String
  readSignature: String
  recipient: String
  signature: String
  updateDate: Date
}

input UserSettingsVOInput {
  content: String
  id: Int
  issuer: String
  latLongFormat: String
  locale: String
  nonce: String
  updateDate: Date
}

"Built-in java.math.BigDecimal"
scalar BigDecimal

"Built-in scalar representing an instant in time"
scalar Date

"Long type"
scalar Long

"Built-in scalar for map-like structures"
scalar Map_Integer_StringScalar

"Built-in scalar for map-like structures"
scalar Map_String_List_ObjectScalar

"Built-in scalar for map-like structures"
scalar Map_String_Map_String_LongScalar

"Built-in scalar for map-like structures"
scalar Map_String_ObjectScalar

"Built-in scalar for map-like structures"
scalar Map_String_StringScalar

"Built-in scalar for dynamic values"
scalar ObjectScalar

"Built-in Short as Int"
scalar Short

"Use SPQR's SchemaPrinter to remove this from SDL"
scalar UNREPRESENTABLE
